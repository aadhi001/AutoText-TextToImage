import random
import string
from transformers import AutoTokenizer
from flask import Flask, redirect, render_template, request, url_for
import os
import cv2
import openai
import numpy as np
import base64
from dotenv import load_dotenv

load_dotenv()


MAX_TOKENS = 1024

# Initialize the tokenizer
tokenizer = AutoTokenizer.from_pretrained('gpt2')


app = Flask(__name__)
openai.api_key = os.getenv("OPENAI_API_KEY")


@app.route("/", methods=("GET", "POST"))
def index():
    if request.method == "POST":
        prompt = request.form["text"]

        # Check for obscenity in the given prompt, return warning flag if the prompt contains obscenity
        isObscene = check_for_obscenity(prompt)
        if isObscene:
            return render_template('index.html', show_warning=True)

        # Enhance the prompt using the method
        text = enhance_prompt(prompt)

        response = openai.Image.create(
            prompt=text,
            n=1,
            size="1024x1024",
            response_format="b64_json"
        )
        im_bytes = base64.b64decode(response['data'][0]['b64_json'])
        im_arr = np.frombuffer(im_bytes, dtype=np.uint8)
        img = cv2.imdecode(im_arr, cv2.IMREAD_COLOR)
        cv2.imwrite(os.path.join("static/", "im.png"), img)
        return redirect(url_for("index"))

    print('code reached here')
    return render_template("index.html", show_warning=False)


def check_for_obscenity(text):
    # using openai moderation api to check for obscenity
    print('Checking for obscenity')
    moderationResponse = openai.Moderation.create(
        input=text)
    moderation_output = moderationResponse["results"][0]['flagged']
    print("Moderation output: ")
    print(moderation_output)
    return moderation_output


def enhance_prompt(input_prompt):
   # Making the prompt more marketing specific, and provide look and feel guidance
    marketing_content = "Enhance the above prompt which will be used to generate images which are marketing-specific"
    look_and_feel_guidance = "The image prompt should consider the look & feel of the image - friendly, professional, and personal."

    input_tokens = len(tokenizer.tokenize(input_prompt))
    marketing_tokens = len(tokenizer.tokenize(marketing_content))
    look_and_feel_tokens = len(tokenizer.tokenize(look_and_feel_guidance))

    remaining_tokens = MAX_TOKENS - input_tokens - \
        marketing_tokens - look_and_feel_tokens

    print('REMAINING TOKENS: ', remaining_tokens)

    # Truncate or adjust the input_prompt to fit within the token limits
    truncated_prompt = input_prompt[:remaining_tokens]

    # Combine the truncated prompt with the marketing-specific content and look & feel guidance
    desired_prompt = f"{truncated_prompt}\n\n{marketing_content}\n\n{look_and_feel_guidance}"

    print('Prompt to text-davinci: ', desired_prompt)
    response = openai.Completion.create(
        model="text-davinci-003", prompt=desired_prompt, max_tokens=MAX_TOKENS)
    print('Response generated by completion api: ', response)
    new_modified_prompt = response['choices'][0]['text']

    # Generate a random seed to ensure uniqueness
    random_seed = generate_random_seed()

    unique_modified_prompt = f"{new_modified_prompt} [Seed: {random_seed}]"
    print('The newly generated image prompt: ', unique_modified_prompt)
    return unique_modified_prompt


def generate_random_seed():
    seed_length = 8
    letters_and_digits = string.ascii_letters + string.digits
    random_seed = ''.join(random.choice(letters_and_digits)
                          for _ in range(seed_length))
    return random_seed
